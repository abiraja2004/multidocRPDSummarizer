I was looking at this today and noticed the following: Since NNX_NotificationHistory_date is never used we should remove it.
I think since nx_notificationhistory_message_date is being used so often it would make sense to make this a CLUSTERED index unless we think this could slow down our writes to this table.
I am still curious what the 'update'/upsert usecase is, since we don't have any UNIQUE or primary key I'm not sure what it could be looking up against to update against.
It also might be possible that all of this should just be written one time to an event log and this table should not be used at all.
Is there any process that reads from it at all?
It looks like it's read in [Message].[GetNotificationRecipients] if we knew where/how often that's used.
Nevermind I found it: if exists(select 'x' from NotificationHistory where messageid=@messageid and TypeId=@notificationType) begin update NotificationHistory set [notification]=@notification, [from]=@from where messageid=@messageid and TypeId=@notificationType end else begin insert NotificationHistory(messageid, [date], [from], hasexception, [notification], TypeId) values(@messageid, getutcdate(), @from, @hasexception, @notification, @notificationType) end This would indicate to me that the clustered index should really be messageid,typeid since it's not so much a 'log' as it is the last time that typeid was updated/sent.
I also see NotificationHistory queried here, but feels almost like a bug: Create procedure dbo.LogClientNotification @messageid varchar(50), @from varchar(255), @hasexception bit, @notification nvarchar(max), @notificationType int = null as begin if (@notificationType in (15,16,17)) begin if exists(select 'x' from NotificationHistory where messageid=@messageid and TypeId=@notificationType) begin update ClientNotificationHistory set [notification]=@notification, [OwnerId]=@from where messageid=@messageid and TypeId=@notificationType end else begin insert into dbo.
ClientNotificationHistory (messageid, [date],[OwnerId], hasexception, [notification], TypeId) values(@messageid, getutcdate(), @from, @hasexception, @notification, @notificationType) end end end Why are we querying NotificationHistory and then updating or inserting to Client NotificationHistory anyway?
